{"version":3,"sources":["queries/queries.js","components/BookDetails.js","components/AddBook.js","components/BookList.js","components/AdminPage.js","components/Navigation.js","components/BookListNew.js","App.js","index.js"],"names":["getBooksQuery","gql","getAuthorsQuery","getAdminAuthorsQuery","getBookDetailsQuery","addBookMutation","removeBookMutation","removeAuthorMutation","BookDetails","this","props","data","book","loading","error","bookId","message","name","genre","author","className","books","map","key","id","displayBookDetails","Component","graphql","options","variables","AddBook","state","authorId","inputChangeHandler","bind","submitFormHandler","resetFieldsHandler","authors","value","event","target","setState","preventDefault","refetchQueries","query","then","response","catch","err","console","log","onSubmit","type","onChange","displayAuthors","compose","BookList","selected","onBookClicked","onClick","e","displayBooks","AdminPage","bookDeleteHandler","authorDeleteHandler","window","confirm","forEach","aria-hidden","Navigation","to","BookListNew","client","ApolloClient","uri","App","path","exact","component","render","ReactDOM","StrictMode","document","getElementById"],"mappings":"sgDAEA,IAAMA,EAAgBC,YAAH,KASbC,EAAkBD,YAAH,KASfE,EAAuBF,YAAH,KAapBG,EAAsBH,YAAH,KAmBnBI,EAAkBJ,YAAH,KASfK,EAAqBL,YAAH,KASlBM,EAAuBN,YAAH,KClEpBO,E,mLACiB,IAAD,EACaC,KAAKC,MAAMC,KAApCC,EADY,EACZA,KAAMC,EADM,EACNA,QAASC,EADH,EACGA,MACvB,OAAID,EAAgB,sDAChBJ,KAAKC,MAAMK,QAAUD,EAAc,qCAAWA,EAAME,SACpDJ,EAEF,6BACC,4BAAKA,EAAKK,MACV,2BAAIL,EAAKM,OACT,2BAAIN,EAAKO,OAAOF,MAChB,wDACA,wBAAIG,UAAU,eACZR,EAAKO,OAAOE,MAAMC,KAAI,SAACV,GAAD,OACtB,wBAAIW,IAAKX,EAAKY,IAAKZ,EAAKK,WAMrB,kD,+BAKR,OAAO,yBAAKO,GAAG,gBAAgBf,KAAKgB,0B,GAzBZC,aA6BXC,cAAQvB,EAAqB,CAC3CwB,QAAS,SAAClB,GACT,MAAO,CACNmB,UAAW,CACVL,GAAId,EAAMK,WAJCY,CAQZnB,G,yBChCGsB,E,kDACL,WAAYpB,GAAQ,IAAD,8BAClB,cAAMA,IACDqB,MAAQ,CACZd,KAAM,GACNC,MAAO,GACPc,SAAU,IAEX,EAAKC,mBAAqB,EAAKA,mBAAmBC,KAAxB,gBAC1B,EAAKC,kBAAoB,EAAKA,kBAAkBD,KAAvB,gBACzB,EAAKE,mBAAqB,EAAKA,mBAAmBF,KAAxB,gBATR,E,6DAYD,IAAD,EACazB,KAAKC,MAAMR,gBAAhCW,EADQ,EACRA,QAASwB,EADD,EACCA,QACjB,OAAIxB,EAAgB,sDAChBwB,EACIA,EAAQf,KAAI,SAACH,GAAD,OAClB,4BAAQmB,MAAOnB,EAAOK,GAAID,IAAKJ,EAAOK,IACpCL,EAAOF,cAHX,I,yCASkBsB,GAAQ,IAAD,EACDA,EAAMC,OAAtBF,EADiB,EACjBA,MAAOrB,EADU,EACVA,KACfR,KAAKgC,SAAL,eACExB,EAAOqB,M,2CAKT7B,KAAKgC,SAAS,CAAExB,KAAM,GAAIC,MAAO,GAAIc,SAAU,O,wCAG9BO,GAAQ,IAAD,OACxBA,EAAMG,iBADkB,MAEUjC,KAAKsB,MAA/Bd,EAFgB,EAEhBA,KAAMC,EAFU,EAEVA,MAAOc,EAFG,EAEHA,SAErBvB,KAAKC,MACHL,gBAAgB,CAChBwB,UAAW,CACVZ,OACAC,QACAc,YAEDW,eAAgB,CAAC,CAAEC,MAAO5C,MAE1B6C,MAAK,SAACC,GACN,EAAKV,wBAELW,OAAM,SAACC,GAAD,OAASC,QAAQC,IAAIF,Q,+BAI7B,OACC,0BAAMxB,GAAG,WAAW2B,SAAU1C,KAAK0B,mBAClC,yBAAKf,UAAU,SACd,6CACA,2BACCgC,KAAK,OACLnC,KAAK,OACLqB,MAAO7B,KAAKsB,MAAMd,KAClBoC,SAAU5C,KAAKwB,sBAIjB,yBAAKb,UAAU,SACd,yCACA,2BACCgC,KAAK,OACLnC,KAAK,QACLqB,MAAO7B,KAAKsB,MAAMb,MAClBmC,SAAU5C,KAAKwB,sBAIjB,yBAAKb,UAAU,SACd,0CACA,4BACCH,KAAK,WACLoC,SAAU5C,KAAKwB,mBACfK,MAAO7B,KAAKsB,MAAMC,UAElB,4BAAQM,MAAM,IAAd,iBACC7B,KAAK6C,mBAIR,4BAAQF,KAAK,UAAb,U,GA1FkB1B,aAgGP6B,MACd5B,YAAQzB,EAAiB,CAAEe,KAAM,oBACjCU,YAAQtB,EAAiB,CAAEY,KAAM,oBAFnBsC,CAGbzB,GCpGI0B,E,kDACL,WAAY9C,GAAQ,IAAD,8BAClB,cAAMA,IACDqB,MAAQ,CACZ0B,SAAU,MAEX,EAAKC,cAAgB,EAAKA,cAAcxB,KAAnB,gBALH,E,0DAOLV,GACbf,KAAKgC,SAAS,CAAEgB,SAAUjC,M,qCAGX,IAAD,OACNb,EAASF,KAAKC,MAAdC,KACR,OAAIA,EAAKE,QACD,+CACGF,EAAKU,MACRV,EAAKU,MAAMC,KAAI,SAACV,GAAD,OACrB,wBAAIW,IAAKX,EAAKY,GAAImC,QAAS,SAACC,GAAD,OAAO,EAAKF,cAAc9C,EAAKY,MACxDZ,EAAKK,cAHF,I,+BAUP,OACC,yBAAKO,GAAG,QACP,gDACA,wBAAIA,GAAG,aAAaf,KAAKoD,gBACzB,kBAAC,EAAD,CAAa9C,OAAQN,KAAKsB,MAAM0B,WAChC,kBAAC,EAAD,W,GA/BmB/B,aAqCRC,cAAQ3B,EAAR2B,CAAuB6B,GCnCzBM,EAAb,4MACCC,kBAAoB,SAACvC,GACpB,EAAKd,MAAMJ,mBAAmB,CAC7BuB,UAAW,CAAEL,MACbmB,eAAgB,CAAC,CAAEC,MAAOzC,OAJ7B,EAQC6D,oBAAsB,SAAC7C,GAEpB8C,OAAOC,QAAP,0CACmC/C,EAAOF,KAD1C,qCAOFE,EAAOE,MAAM8C,SAAQ,SAACvD,GAAD,OAAU,EAAKmD,kBAAkBnD,EAAKY,OAE3D,EAAKd,MAAMH,qBAAqB,CAC/BsB,UAAW,CACVL,GAAIL,EAAOK,IAEZmB,eAAgB,CAAC,CAAEC,MAAOzC,QAvB7B,EA2BCmD,eAAiB,WAAO,IAAD,EACc,EAAK5C,MAAMP,qBAAvCkC,EADc,EACdA,QAASvB,EADK,EACLA,MACjB,OAFsB,EACED,QACJ,iDAChBC,EAAc,qCAAWA,EAAME,SAC/BqB,EAEF,wBAAIjB,UAAU,0BACZiB,EAAQf,KAAI,SAACH,GAAD,OACZ,yBAAKC,UAAU,aAAaG,IAAKJ,EAAOK,IACvC,yBAAKJ,UAAU,SACd,2BAAID,EAAOF,MACX,uBACCG,UAAU,oBACVuC,QAAS,kBACR,EAAKK,oBAAoB7C,KAH3B,kBASD,yBAAKC,UAAU,SACd,4BACED,EAAOE,MAAMC,KAAI,SAACV,GAAD,OACjB,wBAAIW,IAAKX,EAAKY,IACZZ,EAAKK,KAAM,IACZ,uBACCG,UAAU,cACVgD,cAAY,OACZT,QAAS,kBACR,EAAKI,kBACJnD,EAAKY,uBA1BjB,GA/BF,uDAyEE,OACC,yBAAKA,GAAG,SACP,2CACCf,KAAK6C,sBA5EV,GAA+B5B,aAkFhB6B,MACd5B,YAAQxB,EAAsB,CAAEc,KAAM,yBACtCU,YAAQ3B,EAAe,CAAEiB,KAAM,kBAC/BU,YAAQrB,EAAoB,CAAEW,KAAM,uBACpCU,YAAQpB,EAAsB,CAAEU,KAAM,yBAJxBsC,CAKbO,GC/EaO,EAfI,WAClB,OACC,yBAAKjD,UAAU,oBACd,4BACC,4BACC,kBAAC,IAAD,CAASkD,GAAG,KAAZ,SAED,4BACC,kBAAC,IAAD,CAASA,GAAG,UAAZ,a,QCYUC,EAlBK,kBACnB,kBAAC,IAAD,CAAO3B,MAAO5C,IACZ,YAA+B,IAA5Ba,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,MAAOH,EAAW,EAAXA,KACnB,OAAIE,EAAgB,yCAChBC,EAAc,qCAAWA,EAAME,SAElC,6BACC,wBAAIQ,GAAG,iBACLb,EAAKU,MAAMC,KAAI,SAACV,GAAD,OACf,wBAAIW,IAAKX,EAAKY,IAAKZ,EAAKK,eCFzBuD,EAAS,IAAIC,IAAa,CAC9BC,IAAK,kCAuBQC,E,uKAlBX,OACE,kBAAC,IAAD,CAAgBH,OAAQA,GACtB,kBAAC,IAAD,KACE,6BACE,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOI,KAAK,IAAIC,OAAK,EAACC,UAAWtB,IACjC,kBAAC,IAAD,CAAOoB,KAAK,SAASE,UAAWhB,IAChC,kBAAC,IAAD,CAAOc,KAAK,YAAYE,UAAWP,IACnC,kBAAC,IAAD,CAAOQ,OAAQ,kBAAM,0D,GAXjBrD,aCXlBsD,IAASD,OACR,kBAAC,IAAME,WAAP,KACC,kBAAC,EAAD,OAEDC,SAASC,eAAe,W","file":"static/js/main.df2a7fa1.chunk.js","sourcesContent":["import { gql } from \"apollo-boost\";\r\n\r\nconst getBooksQuery = gql`\r\n\t{\r\n\t\tbooks {\r\n\t\t\tname\r\n\t\t\tid\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nconst getAuthorsQuery = gql`\r\n\t{\r\n\t\tauthors {\r\n\t\t\tname\r\n\t\t\tid\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nconst getAdminAuthorsQuery = gql`\r\n\t{\r\n\t\tauthors {\r\n\t\t\tname\r\n\t\t\tid\r\n\t\t\tbooks {\r\n\t\t\t\tname\r\n\t\t\t\tid\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nconst getBookDetailsQuery = gql`\r\n\tquery($id: ID) {\r\n\t\tbook(id: $id) {\r\n\t\t\tid\r\n\t\t\tname\r\n\t\t\tgenre\r\n\t\t\tauthor {\r\n\t\t\t\tid\r\n\t\t\t\tname\r\n\t\t\t\tage\r\n\t\t\t\tbooks {\r\n\t\t\t\t\tname\r\n\t\t\t\t\tid\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nconst addBookMutation = gql`\r\n\tmutation($name: String!, $genre: String!, $authorId: ID!) {\r\n\t\taddBook(name: $name, genre: $genre, authorId: $authorId) {\r\n\t\t\tname\r\n\t\t\tid\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nconst removeBookMutation = gql`\r\n\tmutation($id: ID!) {\r\n\t\tremoveBook(id: $id) {\r\n\t\t\tid\r\n\t\t\tname\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nconst removeAuthorMutation = gql`\r\n\tmutation($id: ID!) {\r\n\t\tremoveAuthor(id: $id) {\r\n\t\t\tname\r\n\t\t\tid\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nexport {\r\n\tgetBooksQuery,\r\n\tgetAuthorsQuery,\r\n\tgetBookDetailsQuery,\r\n\taddBookMutation,\r\n\tremoveBookMutation,\r\n\tremoveAuthorMutation,\r\n\tgetAdminAuthorsQuery,\r\n};\r\n","import React, { Component } from \"react\";\r\nimport { graphql } from \"react-apollo\";\r\nimport { getBookDetailsQuery } from \"../queries/queries\";\r\n\r\nclass BookDetails extends Component {\r\n\tdisplayBookDetails() {\r\n\t\tconst { book, loading, error } = this.props.data;\r\n\t\tif (loading) return <p>Loading book details...</p>;\r\n\t\tif (this.props.bookId && error) return <p>Error: {error.message}</p>;\r\n\t\tif (book) {\r\n\t\t\treturn (\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<h2>{book.name}</h2>\r\n\t\t\t\t\t<p>{book.genre}</p>\r\n\t\t\t\t\t<p>{book.author.name}</p>\r\n\t\t\t\t\t<p>All books by this author:</p>\r\n\t\t\t\t\t<ul className=\"other-books\">\r\n\t\t\t\t\t\t{book.author.books.map((book) => (\r\n\t\t\t\t\t\t\t<li key={book.id}>{book.name}</li>\r\n\t\t\t\t\t\t))}\r\n\t\t\t\t\t</ul>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t} else {\r\n\t\t\treturn <p>No book selected.</p>;\r\n\t\t}\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn <div id=\"book-details\">{this.displayBookDetails()}</div>;\r\n\t}\r\n}\r\n\r\nexport default graphql(getBookDetailsQuery, {\r\n\toptions: (props) => {\r\n\t\treturn {\r\n\t\t\tvariables: {\r\n\t\t\t\tid: props.bookId,\r\n\t\t\t},\r\n\t\t};\r\n\t},\r\n})(BookDetails);\r\n","import React, { Component } from \"react\";\r\nimport { graphql } from \"react-apollo\";\r\nimport compose from \"lodash.flowright\";\r\nimport {\r\n\tgetAuthorsQuery,\r\n\taddBookMutation,\r\n\tgetBooksQuery,\r\n} from \"../queries/queries\";\r\n\r\nclass AddBook extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tname: \"\",\r\n\t\t\tgenre: \"\",\r\n\t\t\tauthorId: \"\",\r\n\t\t};\r\n\t\tthis.inputChangeHandler = this.inputChangeHandler.bind(this);\r\n\t\tthis.submitFormHandler = this.submitFormHandler.bind(this);\r\n\t\tthis.resetFieldsHandler = this.resetFieldsHandler.bind(this);\r\n\t}\r\n\r\n\tdisplayAuthors() {\r\n\t\tconst { loading, authors } = this.props.getAuthorsQuery;\r\n\t\tif (loading) return <option>loading authors...</option>;\r\n\t\tif (authors) {\r\n\t\t\treturn authors.map((author) => (\r\n\t\t\t\t<option value={author.id} key={author.id}>\r\n\t\t\t\t\t{author.name}\r\n\t\t\t\t</option>\r\n\t\t\t));\r\n\t\t}\r\n\t}\r\n\r\n\tinputChangeHandler(event) {\r\n\t\tconst { value, name } = event.target;\r\n\t\tthis.setState({\r\n\t\t\t[name]: value,\r\n\t\t});\r\n\t}\r\n\r\n\tresetFieldsHandler() {\r\n\t\tthis.setState({ name: \"\", genre: \"\", authorId: \"\" });\r\n\t}\r\n\r\n\tsubmitFormHandler(event) {\r\n\t\tevent.preventDefault();\r\n\t\tconst { name, genre, authorId } = this.state;\r\n\t\t//make mutation:\r\n\t\tthis.props\r\n\t\t\t.addBookMutation({\r\n\t\t\t\tvariables: {\r\n\t\t\t\t\tname,\r\n\t\t\t\t\tgenre,\r\n\t\t\t\t\tauthorId,\r\n\t\t\t\t},\r\n\t\t\t\trefetchQueries: [{ query: getBooksQuery }],\r\n\t\t\t})\r\n\t\t\t.then((response) => {\r\n\t\t\t\tthis.resetFieldsHandler();\r\n\t\t\t})\r\n\t\t\t.catch((err) => console.log(err));\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<form id=\"add-book\" onSubmit={this.submitFormHandler}>\r\n\t\t\t\t<div className=\"field\">\r\n\t\t\t\t\t<label>Book name:</label>\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\tname=\"name\"\r\n\t\t\t\t\t\tvalue={this.state.name}\r\n\t\t\t\t\t\tonChange={this.inputChangeHandler}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<div className=\"field\">\r\n\t\t\t\t\t<label>Genre:</label>\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\tname=\"genre\"\r\n\t\t\t\t\t\tvalue={this.state.genre}\r\n\t\t\t\t\t\tonChange={this.inputChangeHandler}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<div className=\"field\">\r\n\t\t\t\t\t<label>Author:</label>\r\n\t\t\t\t\t<select\r\n\t\t\t\t\t\tname=\"authorId\"\r\n\t\t\t\t\t\tonChange={this.inputChangeHandler}\r\n\t\t\t\t\t\tvalue={this.state.authorId}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<option value=\"\">Select author</option>\r\n\t\t\t\t\t\t{this.displayAuthors()}\r\n\t\t\t\t\t</select>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<button type=\"submit\">+</button>\r\n\t\t\t</form>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default compose(\r\n\tgraphql(getAuthorsQuery, { name: \"getAuthorsQuery\" }),\r\n\tgraphql(addBookMutation, { name: \"addBookMutation\" })\r\n)(AddBook);\r\n","import React, { Component } from \"react\";\r\nimport { graphql } from \"react-apollo\";\r\nimport { getBooksQuery } from \"../queries/queries\";\r\n\r\n//components:\r\nimport BookDetails from \"./BookDetails\";\r\nimport AddBook from \"./AddBook\";\r\n\r\nclass BookList extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tselected: null,\r\n\t\t};\r\n\t\tthis.onBookClicked = this.onBookClicked.bind(this);\r\n\t}\r\n\tonBookClicked(id) {\r\n\t\tthis.setState({ selected: id });\r\n\t}\r\n\r\n\tdisplayBooks() {\r\n\t\tconst { data } = this.props;\r\n\t\tif (data.loading) {\r\n\t\t\treturn <p>Loading books...</p>;\r\n\t\t} else if (data.books) {\r\n\t\t\treturn data.books.map((book) => (\r\n\t\t\t\t<li key={book.id} onClick={(e) => this.onBookClicked(book.id)}>\r\n\t\t\t\t\t{book.name}\r\n\t\t\t\t</li>\r\n\t\t\t));\r\n\t\t}\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div id=\"main\">\r\n\t\t\t\t<h1>My Reading List.</h1>\r\n\t\t\t\t<ul id=\"book-list\">{this.displayBooks()}</ul>\r\n\t\t\t\t<BookDetails bookId={this.state.selected} />\r\n\t\t\t\t<AddBook />\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default graphql(getBooksQuery)(BookList);\r\n","import React, { Component } from \"react\";\r\nimport { graphql } from \"react-apollo\";\r\nimport compose from \"lodash.flowright\";\r\nimport {\r\n\tgetBooksQuery,\r\n\tremoveBookMutation,\r\n\tremoveAuthorMutation,\r\n\tgetAdminAuthorsQuery,\r\n} from \"../queries/queries\";\r\n\r\nexport class AdminPage extends Component {\r\n\tbookDeleteHandler = (id) => {\r\n\t\tthis.props.removeBookMutation({\r\n\t\t\tvariables: { id },\r\n\t\t\trefetchQueries: [{ query: getAdminAuthorsQuery }],\r\n\t\t});\r\n\t};\r\n\r\n\tauthorDeleteHandler = (author) => {\r\n\t\tif (\r\n\t\t\t!window.confirm(\r\n\t\t\t\t`Are you sure you want to delete ${author.name} and all books by this author?`\r\n\t\t\t)\r\n\t\t) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t//1. delete all author's books:\r\n\t\tauthor.books.forEach((book) => this.bookDeleteHandler(book.id));\r\n\t\t//2. delete author by id:\r\n\t\tthis.props.removeAuthorMutation({\r\n\t\t\tvariables: {\r\n\t\t\t\tid: author.id,\r\n\t\t\t},\r\n\t\t\trefetchQueries: [{ query: getAdminAuthorsQuery }],\r\n\t\t});\r\n\t};\r\n\r\n\tdisplayAuthors = () => {\r\n\t\tconst { authors, error, loading } = this.props.getAdminAuthorsQuery;\r\n\t\tif (loading) return <p>loading authors...</p>;\r\n\t\tif (error) return <p>Error: {error.message}</p>;\r\n\t\tif (authors) {\r\n\t\t\treturn (\r\n\t\t\t\t<ul className=\"authors-list container\">\r\n\t\t\t\t\t{authors.map((author) => (\r\n\t\t\t\t\t\t<div className=\"row author\" key={author.id}>\r\n\t\t\t\t\t\t\t<div className=\"col-6\">\r\n\t\t\t\t\t\t\t\t<p>{author.name}</p>\r\n\t\t\t\t\t\t\t\t<p\r\n\t\t\t\t\t\t\t\t\tclassName=\"delete-author-btn\"\r\n\t\t\t\t\t\t\t\t\tonClick={() =>\r\n\t\t\t\t\t\t\t\t\t\tthis.authorDeleteHandler(author)\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\tdelete author\r\n\t\t\t\t\t\t\t\t</p>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div className=\"col-6\">\r\n\t\t\t\t\t\t\t\t<ul>\r\n\t\t\t\t\t\t\t\t\t{author.books.map((book) => (\r\n\t\t\t\t\t\t\t\t\t\t<li key={book.id}>\r\n\t\t\t\t\t\t\t\t\t\t\t{book.name}{\" \"}\r\n\t\t\t\t\t\t\t\t\t\t\t<i\r\n\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"fa fa-trash\"\r\n\t\t\t\t\t\t\t\t\t\t\t\taria-hidden=\"true\"\r\n\t\t\t\t\t\t\t\t\t\t\t\tonClick={() =>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tthis.bookDeleteHandler(\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tbook.id\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t></i>\r\n\t\t\t\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t\t</ul>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t))}\r\n\t\t\t\t</ul>\r\n\t\t\t);\r\n\t\t}\r\n\t};\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div id=\"admin\">\r\n\t\t\t\t<h2>Admin Page.</h2>\r\n\t\t\t\t{this.displayAuthors()}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default compose(\r\n\tgraphql(getAdminAuthorsQuery, { name: \"getAdminAuthorsQuery\" }),\r\n\tgraphql(getBooksQuery, { name: \"getBooksQuery\" }),\r\n\tgraphql(removeBookMutation, { name: \"removeBookMutation\" }),\r\n\tgraphql(removeAuthorMutation, { name: \"removeAuthorMutation\" })\r\n)(AdminPage);\r\n","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nconst Navigation = () => {\r\n\treturn (\r\n\t\t<nav className=\"navbar container\">\r\n\t\t\t<ul>\r\n\t\t\t\t<li>\r\n\t\t\t\t\t<NavLink to=\"/\">Home</NavLink>\r\n\t\t\t\t</li>\r\n\t\t\t\t<li>\r\n\t\t\t\t\t<NavLink to=\"/admin\">Admin</NavLink>\r\n\t\t\t\t</li>\r\n\t\t\t</ul>\r\n\t\t</nav>\r\n\t);\r\n};\r\n\r\nexport default Navigation;\r\n","import React from \"react\";\r\nimport { gql } from \"apollo-boost\";\r\nimport { Query } from \"react-apollo\";\r\nimport { getBooksQuery } from \"../queries/queries\";\r\n\r\nconst BookListNew = () => (\r\n\t<Query query={getBooksQuery}>\r\n\t\t{({ loading, error, data }) => {\r\n\t\t\tif (loading) return <p>Loading...</p>;\r\n\t\t\tif (error) return <p>Error: {error.message}</p>;\r\n\t\t\treturn (\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<ul id=\"book-list-new\">\r\n\t\t\t\t\t\t{data.books.map((book) => (\r\n\t\t\t\t\t\t\t<li key={book.id}>{book.name}</li>\r\n\t\t\t\t\t\t))}\r\n\t\t\t\t\t</ul>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t}}\r\n\t</Query>\r\n);\r\n\r\nexport default BookListNew;\r\n","import React, { Component } from \"react\";\r\nimport ApolloClient from \"apollo-boost\";\r\nimport { ApolloProvider } from \"@apollo/react-hooks\";\r\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\r\n\r\n//components:\r\nimport BookList from \"./components/BookList\";\r\nimport AdminPage from \"./components/AdminPage\";\r\nimport Navigation from \"./components/Navigation\";\r\nimport BookListNew from \"./components/BookListNew\";\r\n\r\n// Apollo client setup:\r\nconst client = new ApolloClient({\r\n  uri: \"http://localhost:5000/graphql\",\r\n});\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <ApolloProvider client={client}>\r\n        <BrowserRouter>\r\n          <div>\r\n            <Navigation />\r\n            <Switch>\r\n              <Route path=\"/\" exact component={BookList} />\r\n              <Route path=\"/admin\" component={AdminPage} />\r\n              <Route path=\"/list-new\" component={BookListNew} />\r\n              <Route render={() => <h4>Page not found.</h4>} />\r\n            </Switch>\r\n          </div>\r\n        </BrowserRouter>\r\n      </ApolloProvider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n\t<React.StrictMode>\r\n\t\t<App />\r\n\t</React.StrictMode>,\r\n\tdocument.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}